global !p
def complete(t, opts):
	if t:
		opts = [ m[len(t):] for m in opts if m.lower().startswith(t.lower())]
	if len(opts) == 1:
		return opts[0]
	return "(" + '|'.join(opts) + ')'

endglobal

snippet log "console.log"
console.log($1);$0
endsnippet

snippet doc "/** ... */"
/**
	$0
*/
endsnippet

snippet varf "var a = function"
var $1 = function($2){
	$0
};
endsnippet

snippet thisf "this.a = function"
this.$1 = function($2){
	$0
};
endsnippet

snippet return "return ;"
return $0;
endsnippet

snippet req "var something = require('something');"
var $1 = require('${2:$3$1}');
endsnippet

snippet lodash "var map = require('lodash').map;"
var $1 = require('lodash').$1;
endsnippet

#gulp snippets
snippet gt "gulp.task"
gulp.task('$1', function(){
	${2:gulp.src($3)$5
		.pipe(gulp.dest($4))
	;}
});
endsnippet

snippet gw "gulp.watch"
gulp.task('${1:watch}', function(){
	gulp.watch('$2', ['${3:task}']);
});
endsnippet

snippet gp "gulp.pipe"
.pipe($1)$0
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
$1: function($3){
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
$1: $0,
endsnippet

snippet : "Object key key: 'value'"
$1: ${2:'$3'}${4:,}
endsnippet

snippet proto "Prototype (proto)"
$1.prototype.$2 = function($3){
	${VISUAL}$0
};
endsnippet

snippet forf "for (...) {...} (faster)"
for(var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet for "for (...) {...}"
for(var ${2:i}=0; $2 < ${1:Things}.length; $2++){
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet forin "for i in list"
for(var $1 in $2){
	$0
}

endsnippet

snippet fun "function (fun)" i
function($1){
	${VISUAL}$0
}${2:;}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function($1){
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if($1){
	${VISUAL}$2
}else{
	$3
}
endsnippet

snippet if "if"
if($1){
	${VISUAL}$0
}
endsnippet

snippet }else "else"
}else{
	$0
}

endsnippet

snippet timeout "setTimeout function"
setTimeout(function(){
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:'$2'});
endsnippet

snippet cw "console.warn"
console.warn(${1:'$2'});
endsnippet

snippet ce "console.error"
console.error(${1:'$2'});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:'${3:message}'});
endsnippet

snippet cg "console.group"
console.group('${1:label}');
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time('${1:label}');
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp('${1:label}')
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

snippet variableset "this.name = name" 
this.$1 = $1;
endsnippet

snippet mex "module.exports" 
module.exports = $0;
endsnippet

snippet mec "module.export=SomeClass" 
var $1 = function($2){
	$0
};

module.exports = $1;
endsnippet

snippet stack "dump stack trace"
var e = new Error('dummy');
var stack = e.stack.replace(/^[^\(]+?[\n$]/gm, '')
	.replace(/^\s+at\s+/gm, '')
	.replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@')
	.split('\n')
;
console.log(stack);
endsnippet

#Angular
snippet ng "angular base script"
var ${1:AppNamespace} = {};
$1.${2:SomeController} = function($scope){
	$0
};
angular.module('${3:AppName}', [])
	.controller('${4:$2}', $1.$2)
;
endsnippet

#JQuery
snippet jq "$(documetn).ready..." 
$(function(){
	$0
});
endsnippet

#ADHOC

# vim:ft=snippets foldmethod=marker foldclose
